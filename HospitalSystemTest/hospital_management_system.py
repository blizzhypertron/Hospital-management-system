# -*- coding: utf-8 -*-
"""Hospital Management System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1boYB2Q_ZtzdWeGS53-JKS-_k24yUDF_o
"""

from os import supports_effective_ids
# Updated Hospital Management System V2
# Coded by: The One, The Only... Camron Hylton (and yes I did all of this by myself, Thank you very much 😎)
# Let's manage some doctors and patients, for real

import uuid
from datetime import datetime

def load_banned_words():
  try:
    with open("banned_words.txt", "r", encoding="utf-8") as file:
      return [word.strip().lower() for word in file if word.strip()]
  except FileNotFoundError:
    print("⚠️ banned_words.txt file is missing!")
    return []

BANNED_WORDS = load_banned_words()

# 🚨 Check for any inappropriate words
def contains_banned_word(text):
  text_lower = text.lower()
  return any(bad_word in text_lower for bad_word in BANNED_WORDS)


# 🧠 Base user class for shared human stuff
class User:
    def __init__(self, name):
        self.name = name

# 🧍 Patient class (aka the ones who need help lol)
class Patient(User):
    def __init__(self, name, age, gender):
        super().__init__(name)
        self.patient_id = f"P-{uuid.uuid4().hex[:6]}"
        self.age = age
        self.gender = gender
        self.appointment_list = []

    def display_info(self):
        return f"Patient [{self.patient_id}]: {self.name}, Age: {self.age}, Gender: {self.gender}"

# 👨‍⚕️ Doctor class (the real MVPs)
class Doctor(User):
    def __init__(self, name, specialty, available_slots):
        super().__init__(name)
        self.doctor_id = f"D-{uuid.uuid4().hex[:5]}"
        self.specialty = specialty
        self.available_slots = set(available_slots)

    def is_available(self, slot):
        return slot in self.available_slots

    def view_schedule(self):
        return sorted(self.available_slots)

    def book_slot(self, slot):
        self.available_slots.discard(slot)

# 📅 Appointment class - where the magic happens
class Appointment:
    def __init__(self, patient, doctor, date, time):
        self.appointment_id = f"A-{uuid.uuid4().hex[:6]}"
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.status = "Scheduled"

    def confirm(self):
        self.status = "Confirmed"

    def cancel(self):
        self.status = "Cancelled"

    def display(self):
        return (
            f"Appointment {self.appointment_id}: {self.patient.name} with Dr. {self.doctor.name} "
            f"on {self.date} at {self.time} | Status: {self.status}"
       )


# 💸 Billing class - cuz nothing's free 😬
class Billing:
    def __init__(self, appointment, extra_services, card_number, card_brand, payment_type):
        self.appointment = appointment
        self.extra_services = []
        self.extras = 50000
        self.card_number = card_number
        self.card_brand = card_brand
        self.payment_type = payment_type
        self.total = 0

    def calculate_total(self):
        base_fee = 5000
        self.total = base_fee + sum(self.extras)

        if self.payment_type == "P":
            print(f"💳 You're paying partially. Base: ${self.total}")
            amount_paid = float(input("💵 How much are you paying now? "))
            remaining = self.total - amount_paid

            print(f"🧾 You still owe: ${remaining:.2f}")
            confirm = input("📆 Did you pay the rest on time? (y/n): ").strip().lower()

            if confirm == "n":
                late_fee = 3000  # static or percentage-based
                self.total += late_fee
                print(f"⚠️ Late fee of ${late_fee} added. New total: ${self.total:.2f}")

    def print_receipt(self, currency):
        print("\n--- Billing Receipt ---")
        print(f"Patient: {self.appointment.patient.name}")
        print(f"Doctor: {self.appointment.doctor.name}")
        print(f"Card: {self.card_brand} ending in {self.card_number[-4:]}")
        print(f"Total: {currency} ${self.total}")

# 🏥 Main hospital system logic - the mothership
class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments_list = {}

    def add_patient(self, name, age, gender):
        new_patient = Patient(name, age, gender)
        self.patients[new_patient.patient_id] = new_patient
        return new_patient

        # sanity check, this ain't the old folks home 🧓
        if age >= 100 or age <= 0:
            print("Invalid age. That number doesn't exist, you crazy! 😭")
            return
        if gender.lower() not in ["male", "female"]:
            print("Please enter 'Male or Female' for gender")
            return

    def add_doctor(self, name, specialty, slots):
        # Doc just clocked in ⏰
        d = Doctor(name, specialty, slots)
        self.doctors[d.doctor_id] = d
        print(f"Doctor added with ID: {d.doctor_id} 🩺")

    def book_appointment(self, pid, did, slot):
        print("Trying to book that appointment... fingers crossed 🤞")
        patient = self.patients.get(pid)
        doctor = self.doctors.get(did)
        if not patient or not doctor:
            print("Invalid patient or doctor ID. Bro, check your inputs 💀")
            return

        if not doctor.is_available(slot):
            print("Doc is booked at that time 😤 Choose another slot.")
            return

        # Secure the bag 🔒
        appointment = Appointment(patient, doctor, slot)
        doctor.book_slot(slot)
        patient.appointments.append(appointment)
        self.appointments_list[appointment.appointment_id] = appointment
        print(f"Appointment confirmed! ID: {appointment.appointment_id} 🎉")

    def edit_appointment(self, appointment_id, new_slot):
        if appointment_id in self.appointments:
          self.appointments[appointment_id]['slot'] = new_slot
          print("✅ Appointment updated successfully.")
        else:
           print("❌ Appointment ID not found.")

    def cancel_appointment(self, aid):
        appt = self.appointments_list.get(aid)
        if appt:
            appt.cancel()
            print("Appointment cancelled. RIP 🪦")
        else:
            print("Appointment not found. That ID's ghosting us 👻")

    def generate_bill(self, aid):
        appt = self.appointments_list.get(aid)
        if not appt:
            print("Appointment ID not found. You sure that's real? 🤨")
            return

        patient = appt.patient
        doctor = appt.doctor
        slot = appt.slot

        print(f"📬 Noification: {patient.name}, your appoinment with Dr. {doctor.name} is comfirmed for {slot}.")

        card_number = input("Enter you credit number: ").strip()
        card_brand = input(" Enter Card Brand (Visa/MasterCard/AmEx): ").strip().title()
        currency = input(" Enter currency (USD, CAD, JMD): ").strip().upper()

        if currency not in ["USD", "CAD", "JMD"]:
          print("Invaild currency. Defaulting to USD.")
          currency = "USD"

          # 💳 Payment Option
          payment_type = input("🧾 Would you like to pay in Full or Partial? (F/P): ").strip().upper()
          if payment_type not in ["F", "P"]:
           print("❌ Invalid input. Assuming Full payment.")
           payment_type = "F"

        extras = input("Drop extra charges (comma separated): ")
        extra_costs = list(map(int, extras.split(','))) if extras else []

        bill = Billing(appt, extra_costs, card_number, card_brand)
        bill.calculate_total()
        bill.print_receipt(currency)

# 🕹️ CLI time - where user meets code
def start_cli():
    system = HospitalSystem()

    while True:
        print("\n")
        print("╔═══════════════════════════════════════╗")
        print("║           VITALCARE HOSPITAL          ║")
        print("║      'Your Health, Our Priority'      ║")
        print("╚═══════════════════════════════════════╝")

        print("✨ Welcome to VitalCare Hospital System ✨\n")
        print("=====~ M        E        N        U ~=====\n")
        print("How can I help you today?\n")
        print("1. Add Patient 🧍")
        print("2. Add Doctor 👨‍⚕️")
        print("3. Book Appointment 📅")
        print("4. Edit Appointment")
        print("5. Cancel Appointment ❌")
        print("6. Generate Bill ")
        print("7. Exit 🚪")

        choice = input("Pick your vibe (1-7): ")
        print("------------------------------------------------------- \n")

        match choice:
            case "1":
              try:
                name = input("Patient Name: ")
                if len(name.split()) < 2 or not name.replace(" ", "").isalpha():
                  raise ValueError("⚠️ Sir/Madam, please use your full name (first and last), letters only. No numbers or symbols.")

                if contains_banned_word(name):
                  raise ValueError("Whoa, that name's not appropriate for this system. Try again respectfully.")

                age = int(input("Age: "))
                if age > 100 or age <= 0:
                  raise ValueError("That number doesn't exist! Try again.")

                gender = input("Gender (Male/Female or M/F): ").strip().lower()
                if gender in ["m", "male"]:
                  gender = "Male"
                elif gender in ["f", "female"]:
                  gender = "Female"
                else:
                  raise ValueError("🚷 Only Male or Female allowed. That’s how we roll here.")

                p = system.add_patient(name, age, gender)

                print(f"""
                🪪 Patient ID Card
                -------------------------
                Name    : {p.name}
                ID      : {p.patient_id}
                Age     : {p.age}
                Gender  : {p.gender}
                -------------------------
                Keep this safe, legend! 🔐
                """)

              except ValueError as ve:
                 print(ve)
                 return

            case "2":
              try:
                name = input("Doctor Name: ")
                if len(name.split()) < 2 or not name.replace(" ", "").isalpha():
                   raise ValueError("👨‍⚕️ Please enter the doctor's full name (first and last), letters only.")
                if contains_banned_word(name):
                   raise ValueError("💢 That's not an acceptable name. Be respectful.")

                age = int(input("Age: "))
                if age > 100 or age <= 0:
                  raise ValueError("That number doesn't exist! Try again.")

                gender = input("Gender (Male/Female or M/F): ").strip().lower()
                if gender in ["m", "male"]:
                  gender = "Male"
                elif gender in ["f", "female"]:
                  gender = "Female"
                else:
                  raise ValueError("🚷 Only Male or Female allowed. That’s how we roll here.")

                system.add_patient(name, age, gender)

                print("\n--- Choose your Specialty---\n")
                print("1. Doctor")
                print("2. Nurse")
                print("3. Cardiologist")
                print("4. Pediatrician")
                print("5. Suregon")
                print("6. Orthopedic")
                print("7. Gynecologist \n")

                spec_choice= input("Enter the number for the specialty (1-7): ").strip()
                spec_map= {
                       "1": "Doctor",
                       "2": "Nurse",
                       "3": "Cardiologist",
                       "4": "Pediatrician",
                       "5": "Surgeon",
                       "6": "Orthopedic",
                       "7": "Gynecologist"
                  }

                if spec_choice not in spec_map:
                    print("⚠️ Invaild specialty selction. Try again next time")
                    break

                specialty = spec_map[spec_choice]

                slots = input("Available Slots (comma-separated e.g. '15-07-2025 10:00 AM'): ").split(",")
                system.add_doctor(name, specialty, [s.strip() for s in slots])

              except ValueError as ve:
                print(ve)
                return

            case "3":
              try:
                patient_id = input("Enter your Patient ID: ").strip()
                doctor_id = input("Enter Doctor ID you want to book with: ").strip()
                slot = input("Enter date and time (DD-MM-YYYY 10:30 AM): ").strip()

                system.book_appointment(patient_id, doctor_id, slot)
              except Exception as e:
                print(f"❌ {e}")

            case "4":
               aid = input("📝 Enter Appointment ID to edit: ").strip()
               new_slot = input("📅 Enter new date and time (e.g. '26-07-2025 10:30 AM'): ").strip()
               system.edit_appointment(aid, new_slot)

            case "5":
              aid = input("Appointment ID: ")
              system.cancel_appointment(aid)

            case "6":
              aid = input("Appointment ID For Billing: ")
              system.generate_bill(aid)

            case "7":
                confirm1 = input("Are you sure you want to exit? (yes/no): ").lower()
                if confirm1 == "yes":
                    confirm2 = input("Are you 100% SURE you want to exit the system? 🤔 (yes/no): ").lower()
                    if confirm2 == "yes":
                      confirm3 = input("Remember there's no going back... are you postive? 😳 (yes/no): ").lower()
                      if confirm3 == "yes":
                        print("Before you go... got a second?")
                        print("We love to hear what you think about my system!")
                        print("Feedback: https://forms.gle/5CaxDhHtWHABHbfB6")
                        print("\nAlrighty then, logging off... Stay hydrated ✌️")
                        break
                    else:
                        print("Changed your mind? Smart move 🧠")
                else:
                    print("Back to business then 💼")
            case _:
                print("Nah that ain't a valid choice. Try again 🤖")

# 🎬 Run the drama
if __name__ == "__main__":
    start_cli()