# -*- coding: utf-8 -*-
"""Hospital Management System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1boYB2Q_ZtzdWeGS53-JKS-_k24yUDF_o
"""

from os import supports_effective_ids
# Updated Hospital Management System V2
# Coded by: The One, The Only... Camron Hylton (and yes I did all of this by myself, Thank you very much 😎)
# Let's manage some doctors and patients, for real

import uuid
from datetime import datetime

def load_banned_words():
  try:
    with open("banned_words.txt", "r", encoding="utf-8") as file:
      return [word.strip().lower() for word in file if word.strip()]
  except FileNotFoundError:
    print("⚠️ banned_words.txt file is missing!")
    return []

BANNED_WORDS = load_banned_words()

# 🚨 Check for any inappropriate words
def contains_banned_word(text):
  text_lower = text.lower()
  return any(bad_word in text_lower for bad_word in BANNED_WORDS)


# 🧠 Base user class for shared human stuff
class User:
    def __init__(self, name):
        self.name = name

# 👨‍⚕️ Doctor class (the real MVPs)
class Doctor:
    def __init__(self, name, specialty, available_slots):
        self.name = name
        self.specialty = specialty
        self.available_slots = set(available_slots)
        self.doctor_id = f"D-{specialty[:3].capitalize()}-{uuid.uuid4().hex[:4]}"
        self.notifications = []

    def is_available(self, slot):
        return slot in self.available_slots

    def book_slot(self, slot):
        self.available_slots.discard(slot)

    def add_notification(self, msg):
        self.notifications.append(msg)

    def show_dashboard(self):
        print(f"📋 Dashboard for Dr. {self.name} ({self.specialty})")
        if self.notifications:
            print("🔔 Notifications:")
            for n in self.notifications:
                print(f" - {n}")
        else:
            print("No new notifications.")


# 🧍 Patient class (aka the ones who need help lol)
class Patient:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
        self.patient_id = f"P-{uuid.uuid4().hex[:6]}"
        self.appointments = []

    def give_feedback(self):
        comment = input("📝 Leave feedback for your experience: ")
        print("🙏 Thank you for your feedback!")
        return comment


# 📅 Appointment Class – where the vibes meet the schedule
class Appointment:
    def __init__(self, patient, doctor, slot):
        self.appointment_id = f"A-{uuid.uuid4().hex[:6]}"
        self.patient = patient
        self.doctor = doctor
        self.slot = slot
        self.status = "Scheduled"

    def cancel(self):
        self.status = "Cancelled"

    def display(self):
        return f"{self.slot} - {self.patient.name} with Dr. {self.doctor.name} ({self.doctor.specialty})"


# 💸 Billing Class – because healthcare ain’t free
class Billing:
    def __init__(self, appointment, extra_services=None, payment_type="full", method="Cash", card_brand=None, card_last4=None, currency="USD"):
        self.appointment = appointment
        self.base_fee = 30000
        self.extra_services = extra_services or []
        self.tax_rate = 0.75 #75% tax
        self.payment_type = payment_type
        self.method = method
        self.card_brand = card_brand
        self.card_last4 = card_last4
        self.currency = currency.upper()

    def subtotal(self):
        return self.base_fee + sum(self.extra_services)

    def tax_amount(self):
        return self.subtotal() * self.tax_rate

    def total(self):
        full_total = self.subtotal() + self.tax_amount()
        if self.payment_type == "partial":
           return full_total * 0.5  # Only pay half for partial payments
           return full_total

    def print_receipt(self):
        print("\n💳 --- Billing Receipt --- 💳")
        print(f"Appointment ID: {self.appointment.appointment_id}")
        print(f"Patient: {self.appointment.patient.name}")
        print(f"Doctor: {self.appointment.doctor.name}")
        print(f"Payment Type: {self.payment_type}")
        print(f"Currency: {self.currency}")
        print(f"Base Fee: ${self.base_fee} {self.currency}")
        print(f"Extra Services: ${sum(self.extra_services)} {self.currency}")
        print(f"Subtotal: ${self.subtotal():.2f} {self.currency}")
        print(f"Tax (10%): ${self.tax_amount():.2f} {self.currency}")
        print(f"Total: ${self.total_with_tax():.2f} {self.currency}")
        print("-----------------------------\n")

# 🏥 HospitalSystem Class – the whole ecosystem
class HospitalSystem:
    def __init__(self):
        # 📋 Master list of everyone and everything
        self.patients = {}
        self.doctors = {}
        self.appointments = {}

    def add_patient(self, name, age, gender):
        # ➕ New patient drops in
        p = Patient(name, age, gender)
        self.patients[p.patient_id] = p
        print(f"🆕 Patient registered with ID: {p.patient_id}")
        print(f'''
        🪪 Patient ID Card
        -------------------------
        Name    : {p.name}
        ID      : {p.patient_id}
        Age     : {p.age}
        Gender  : {p.gender}
        -------------------------
        Keep this safe, legend! 🔐
        ''')
        return p

    def add_doctor(self, name, age, gender, specialty, date, time):
        # 🩺 New docs enter the chat
        slot = f"{date} {time}"
        d = Doctor(name, specialty, [slot])
        self.doctors[d.doctor_id] = d
        print(f"✅ Dr.{name} M.D., registered with ID: {d.doctor_id}")
        return d

    def create_appointment(self, pid, did, date, time):
        # 📅 Time to schedule a lil meet-up
        slot = f"{date} {time}"
        if pid not in self.patients:
            print("❌ Patient ID not found.")
            return
        if did not in self.doctors:
            print("❌ Doctor ID not found.")
            return

        doctor = self.doctors[did]
        if not doctor.is_available(slot):
            print("❌ Slot not available.")
            return

        appointment = Appointment(self.patients[pid], doctor, slot)
        self.appointments[appointment.appointment_id] = appointment
        doctor.book_slot(slot)
        self.patients[pid].appointments.append(appointment)
        doctor.add_notification(f"New appointment booked: {slot} with {self.patients[pid].name}")
        print(f"✅ Appointment booked! ID: {appointment.appointment_id}")

    def edit_appointment(self, appointment_id, new_date, new_time):
        appointment = self.appointments.get(appointment_id)
        if not appointment:
          print("❌ Appointment not found.")
          return

        doctor = appointment.doctor
        new_slot = f"{new_date} {new_time}"

        if not doctor.is_available(new_slot):
          print("⚠️ New time is not available for this doctor.")
          return

    # Free old slot & assign new one
        doctor.available_slots.add(appointment.slot)
        doctor.book_slot(new_slot)
        appointment.slot = new_slot
        print("✅ Appointment rescheduled successfully.")

    def cancel_appointment(self, aid):
        # ❌ Patient said "nevermind"
        appt = self.appointments.get(aid)
        if appt:
            appt.cancel()
            print("❌ Appointment cancelled.")
        else:
            print("⚠️ Appointment ID not found.")

    def generate_bill(self, aid):
        # 💳 Bring out the money machine
        appt = self.appointments.get(aid)
        if not appt:
            print("⚠️ Appointment ID not found.")
            return
        extras = input("Enter extra charges (comma separated): ")
        extra_costs = list(map(int, extras.split(','))) if extras else []

        payment_type = input("Full or Partial payment? (full/partial): ").strip().lower()
        if payment_type not in ["full", "partial"]:
          print("Invaild payment type. Use 'full' or 'partial' please.")
          return

        currency = input("Choose currency (USD/JMD/CAD): ").strip().lower()
        if currency not in ["USD", "JMD", "CAD"]:
          print("⚠️ Invaild currency. Defualting to USD")
          currency = "USD"

        print("\n💳 Choose your payment method:")
        print("1. Cash")
        print("2. Credit/Debit Card")
        print("3. Apple Pay")
        print("4. Google Pay")

        method = input("Pick a number (1–4): ").strip()

        card_brand = None
        card_number = None

        if method == "1":
           method_type = "Cash"
           print("💵 Cash received. Thanks!")
        elif method == "2":
             method_type = "Card"
             card_brand = input("🧾 Enter Card Brand (Visa, MasterCard, Amex, etc.): ").title()
             card_number = input("🔢 Enter Card Number (mock): ")

             if not card_number.isdigit() or len(card_number) not in [13, 15, 16]:
                print("⚠️ Invalid card number format.")
                return

             print(f"✅ {card_brand} payment processed successfully.")

        elif method == "3":
             method_type = "Apple Pay"
             print("📲 Apple Pay tapped successfully!")
        elif method == "4":
             method_type = "Google Pay"
             print("📲 Google Pay transaction complete!")
        else:
            print("❌ Invalid payment method.")
            return

        bill = Billing(
        appointment=appt,
        extra_services=extra_costs,
        payment_type=payment_type,
        method= method_type,
        card_brand=card_brand,
        card_last4=card_number[-4:] if card_number else None,
        currency=currency
        )

        bill.print_receipt()
"""
    def collect_feedback(self, pid):
        if pid in self.patients:
            return self.patients[pid].give_feedback()
        else:
            print("Patient ID not found.")
            return None
"""

# 🕹️ CLI time - where user meets code
def start_cli():
    system = HospitalSystem()

    while True:
        print("\n")
        print("╔═══════════════════════════════════════╗")
        print("║           VITALCARE HOSPITAL          ║")
        print("║      'Your Health, Our Priority'      ║")
        print("╚═══════════════════════════════════════╝")

        print("✨ Welcome to VitalCare Hospital System ✨\n")
        print("=====~ M        E        N        U ~=====\n")
        print("How can I help you today?\n")
        print("1. Add Patient 🧍")
        print("2. Add Doctor 👨‍⚕️")
        print("3. Book Appointment 📅")
        print("4. Edit Appointment")
        print("5. Cancel Appointment ❌")
        print("6. Generate Bill ")
        print("7. Doctor Dashboard")
        print("8. Exit with Feedback 🚪")

        choice = input("\n Pick your vibe (1-8): ")
        print("------------------------------------------------------- \n")

        if choice == "1":
            name = input("Patient Name: ")
            if len(name.split()) < 2 or not name.replace(" ", "").isalpha():
               raise ValueError("⚠️ Sir/Madam, please use your full name (first and last), letters only. No numbers or symbols.")

            if contains_banned_word(name):
               raise ValueError("⛔ Whoa there, that name's not appropriate. Try again respectfully.")

            age = int(input("Age: "))
            if age > 100 or age <= 0:
               raise ValueError("🚫 That number doesn't exist, you crazy! Try again.")

            gender = input("Gender (Male/Female or M/F): ").strip().lower()
            if gender not in ["male", "female", "m", "f"]:
               raise ValueError("🚷 This system isn't for you. Go away. Just for Male and Female. God made us that way.")

            gender = "Male" if gender in ["male", "m"] else "Female"

            system.add_patient(name, age, gender)

        elif choice == "2":
            name = input("Doctor Name: ")
            if len(name.split()) < 2 or not name.replace(" ", "").isalpha():
               raise ValueError("⚠️ Sir/Madam, please use your full name (first and last), letters only. No numbers or symbols.")

            if contains_banned_word(name):
               raise ValueError("⛔ Whoa there, that name's not appropriate. Try again respectfully.")

            age = int(input("Age: "))
            if age > 100 or age <= 0:
               raise ValueError("🚫 That number doesn't exist, you crazy! Try again.")

            gender = input("Gender (Male/Female or M/F): ").strip().lower()
            if gender not in ["male", "female", "m", "f"]:
               raise ValueError("🚷 This system isn't for you. Go away. Just for Male and Female. God made us that way.")

            gender = "Male" if gender in ["male", "m"] else "Female"

            specialty = input("Specialty: ")
            date = input("Date (e.g. 15-07-2025): ")
            time = input("Time (e.g. 10:00 AM): ")

            system.add_doctor(name, age, gender, specialty, date, time)

        elif choice == "3":
            pid = input("Patient ID: ")
            did = input("Doctor ID: ")
            date = input("Date: ")
            time = input("Time: ")
            system.create_appointment(pid, did, date, time)

        elif choice == "4":
          appt_id = input("Enter your Apointment ID to edit: ")
          new_date = input("New date (e.g 28-07-2025): ")
          new_time = input("New time (e.g 1!:00 AM): ")
          system.edit_appointment(appt_id, new_date, new_time)

        elif choice == "5":
            aid = input("Appointment ID to cancel: ")
            system.cancel_appointment(aid)

        elif choice == "6":
            aid = input("Appointment ID for billing: ")
            system.generate_bill(aid)

        elif choice == "7":
            did = input("Enter your Doctor ID: ")
            if did in system.doctors:
                doc = system.doctors[did]
                doc.show_dashboard()
            else:
                print("Doctor ID not found.")

        elif choice == "8":
             confirm1 = input("Are you sure you want to exit? (yes/no): ").lower()
             if confirm1 == "yes":
                confirm2 = input("Are you 100% SURE you want to exit the system? 🤔 (yes/no): ").lower()
                if confirm2 == "yes":
                  confirm3 = input("Remember there's no going back... are you positive? 😳 (yes/no): ").lower()
                  if confirm3 == "yes":
                   print("\n📝 Before you go... got a second?")
                   print("We'd love to hear what you think about this system ❤️")
                   print("🔗 Feedback: https://forms.gle/TGMnpe4fm5cq6hw77")
                   print("\nAlrighty then, logging off... Stay hydrated ✌️")
                   break
                else:
                  print("Changed your mind? Smart move 🧠")
             else:
                print("Changed your mind? Smart move 🧠")
        else:
           print("Back to business then 💼")


# 🎬 Entry point
if __name__ == "__main__":
    start_cli()